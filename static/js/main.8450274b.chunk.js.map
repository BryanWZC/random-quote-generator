{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/twitter.svg"],"names":["App","props","state","quotesArr","isLoaded","quote","handleClick","bind","a","fetch","response","json","data","setState","quotes","Math","floor","random","length","error","this","message","arr","i","push","key","id","className","boxAnimate","author","onClick","href","src","twitter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"4WAkEeA,E,kDA1Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,UAAW,CAAC,IACZC,UAAU,EACVC,MAAO,IAGT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARH,E,gEAWG,IAAD,OAClB,IAAI,sBAAC,8BAAAC,EAAA,sEACwBC,IAAM,0IAD9B,cACOC,EADP,gBAEoBA,EAASC,OAF7B,OAEOC,EAFP,OAGC,EAAKC,SAAS,CAACV,UAAWS,EAAKE,OAAQV,UAAU,IACjD,EAAKS,SAAS,CAACR,MAAO,EAAKH,MAAMC,UAAUY,KAAKC,MAAMD,KAAKE,SAAS,EAAKf,MAAMC,UAAUe,WAJ1F,0CAAD,GAMJ,MAAOC,GACPC,KAAKP,SAAS,CAACM,MAAOA,EAAME,a,oCAK5BD,KAAKP,SAAS,CAACR,MAAOe,KAAKlB,MAAMC,UAAUY,KAAKC,MAAMD,KAAKE,SAASG,KAAKlB,MAAMC,UAAUe,a,mCAKzF,IADA,IAAII,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAGA,IACpBD,EAAIE,KAAK,yBAAKC,IAAOF,EAAGG,GAAI,gBAAgBH,KAE9C,OAAOD,I,+BAGC,IAAD,EACgBF,KAAKlB,MAArBiB,EADA,EACAA,MAAOd,EADP,EACOA,MAEd,OAAIc,EACK,uCAAaA,EAAME,SAG1B,yBAAKM,UAAU,OAEZP,KAAKQ,aACN,yBAAKF,GAAG,aACN,wBAAIA,GAAK,WAAT,yCACA,wBAAIA,GAAG,QAAQrB,EAAMA,OACrB,wBAAIqB,GAAK,UAAUrB,EAAMwB,QACzB,4BAAQH,GAAK,YAAYI,QAAWV,KAAKd,aAAa,0CACtD,uBAAGoB,GAAK,cAAcK,KAAO,wCAAuC,yBAAKL,GAAK,aAAaM,IAAOC,a,GAnD1FC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAME,a,kBEzI5BgC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.8450274b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport fetch from 'node-fetch';\nimport twitter from \"./images/twitter.svg\";\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quotesArr: [{}],\n      isLoaded: false,\n      quote: {}\n\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    try{(async () => {\n          const response = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n          const data = await response.json();\n          this.setState({quotesArr: data.quotes, isLoaded: true});\n          this.setState({quote: this.state.quotesArr[Math.floor(Math.random()*this.state.quotesArr.length)]});\n    })();\n  } catch (error){\n    this.setState({error: error.message})\n  }\n  }\n\n  handleClick() {\n    this.setState({quote: this.state.quotesArr[Math.floor(Math.random()*this.state.quotesArr.length)]})\n  }\n\n  boxAnimate(){\n    let arr = [];\n    for(let i = 0; i < 8; i++){\n      arr.push(<div key = {i} id={'box-animation'+i}></div>)\n    }\n    return arr\n  }\n\n  render() {\n    const {error, quote} = this.state; \n\n    if (error){\n      return <div>Error: {error.message}</div>\n    } else {\n      return (\n      <div className=\"App\">\n\n        {this.boxAnimate()}\n        <div id=\"quote-box\">\n          <h1 id = 'heading'> &#8220; Random Quote Generator &#8220;</h1>\n          <h2 id='text'>{quote.quote}</h2>\n          <h4 id = 'author'>{quote.author}</h4>\n          <button id = 'new-quote' onClick = {this.handleClick}><h4>New Quote</h4></button>\n          <a id = 'tweet-quote' href = 'https://www.twitter.com/intent/tweet'><img id = \"tweet-icon\" src = {twitter} ></img></a>\n        </div>\n      </div>\n    )\n    }\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/twitter.b2ebea9f.svg\";"],"sourceRoot":""}